<!--
$PostgreSQL: pgsql/doc/src/sgml/ref/truncate.sgml,v 1.24 2007/05/11 19:40:08 neilc Exp $
PostgreSQL documentation
-->

<refentry id="SQL-TRUNCATE">
 <refmeta>
  <refentrytitle id="SQL-TRUNCATE-TITLE">TRUNCATE</refentrytitle>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>TRUNCATE</refname>
  <refpurpose>empty a table or set of tables</refpurpose>
 </refnamediv>

 <indexterm zone="sql-truncate">
  <primary>TRUNCATE</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
TRUNCATE [ TABLE ] <replaceable class="PARAMETER">name</replaceable> [, ...] [ CASCADE | RESTRICT ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>TRUNCATE</command> quickly removes all rows from a set of
   tables. It has the same effect as an unqualified
   <command>DELETE</command> on each table, but since it does not actually
   scan the tables it is faster. Furthermore, it reclaims disk space
   immediately, rather than requiring a subsequent <command>VACUUM</command>
   operation. This is most useful on large tables.
  </para>
 </refsect1>
  
 <refsect1>
  <title>Parameters</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">name</replaceable></term>
    <listitem>
     <para>
      The name (optionally schema-qualified) of a table to be truncated.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CASCADE</literal></term>
    <listitem>
     <para>
      Automatically truncate all tables that have foreign-key references
      to any of the named tables, or to any tables added to the group
      due to <literal>CASCADE</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTRICT</literal></term>
    <listitem>
     <para>
      Refuse to truncate if any of the tables have foreign-key references
      from tables that are not to be truncated.  This is the default.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
  <title>Notes</title>

  <para>
   Only the owner of a table can <command>TRUNCATE</> it.
  </para>

  <para>
   <command>TRUNCATE</> cannot be used on a table that has foreign-key
   references from other tables, unless all such tables are also truncated
   in the same command.  Checking validity in such cases would require table
   scans, and the whole point is not to do one.  The <literal>CASCADE</>
   option can be used to automatically include all dependent tables &mdash;
   but be very careful when using this option, or else you might lose data you
   did not intend to!
  </para>

  <para>
   <command>TRUNCATE</> will not run any <literal>ON DELETE</literal>
   triggers that might exist for the tables.
  </para>

  <warning>
   <para>
    <command>TRUNCATE</> is not MVCC-safe (see <xref linkend="mvcc">
     for general information about MVCC).  After truncation, the table
     will appear empty to all concurrent transactions, even if they
     are using a snapshot taken before the truncation occurred.  This
     will only be an issue for a transaction that did not access the
     truncated table before the truncation happened &mdash; any
     transaction that has done so would hold at least an
     <literal>ACCESS SHARE</literal> lock, which would block
     <command>TRUNCATE</> until that transaction completes.  So
     truncation will not cause any apparent inconsistency in the table
     contents for successive queries on the same table, but it could
     cause visible inconsistency between the contents of the truncated
     table and other tables in the database.
   </para>

   <para>
    <command>TRUNCATE</> is transaction-safe, however: the truncation
    will be safely rolled back if the surrounding transaction does not
    commit.
   </para>
  </warning>
 </refsect1>

 <refsect1>
  <title>Examples</title>

  <para>
   Truncate the tables <literal>bigtable</literal> and <literal>fattable</literal>:

<programlisting>
TRUNCATE bigtable, fattable;
</programlisting>
  </para>

  <para>
   Truncate the table <literal>othertable</literal>, and cascade to any tables
   that reference <literal>othertable</literal> via foreign-key
   constraints:

<programlisting>
TRUNCATE othertable CASCADE;
</programlisting>
  </para>
 </refsect1>

 <refsect1>
  <title>Compatibility</title>

  <para>
   There is no <command>TRUNCATE</command> command in the SQL standard.
  </para>
 </refsect1>
</refentry>
